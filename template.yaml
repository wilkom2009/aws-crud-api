AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Spring Boot 2 CRUD API
Globals:
  Function:
    Runtime: java11
    MemorySize: 1024
    Timeout: 20
    Tracing: Active
    Environment:
      Variables:
        TABLE_NAME: !Ref CrudDBTable
        AWS_XRAY_TRACING_NAME: "CrudApiTracing"
        SRC_BUCKET_NAME: !Ref BucketName
        DEST_BUCKET_NAME: !Sub "${BucketName}-resized"

Parameters:
  BucketName:
    Type: String
    Description: Name of the bucket on which lifecycle configuration will apply
    Default: crud-items-api-images-bucket

Resources:
  # Creating Cognito UserPool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Crud-Cognito-User-Pool

  # Creating COGNITO UserPoolClient which enables the OAuthFlowwith client_credentialsand allowing OAuthScopes for all CRUD endpoints
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoDomainNameResourceServer
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: Crud-CognitoUserPoolClient
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - client_credentials
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - access_points/read
        - access_points/delete
        - access_points/update
        - access_points/write

  # Creating UserPoolDomain and mapped with CongitoUserPool
  CognitoDomainName:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: crud-domain
      UserPoolId: !Ref CognitoUserPool

  # Creating a UserpoolResourceServerwith all CRUD (create, read, update, delete) scopes.
  CognitoDomainNameResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: access_points
      Name: !Sub Crud-resource-server
      Scopes:
        - ScopeDescription: "Read Resources"
          ScopeName: "read"
        - ScopeDescription: "Write Resources"
          ScopeName: "write"
        - ScopeDescription: "Delete Resources"
          ScopeName: "delete"
        - ScopeDescription: "Update Resources"
          ScopeName: "update"
      UserPoolId: !Ref CognitoUserPool

  CrudAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: crud-api
      # Creating API-Gateway with CustomCognitoAuthorizerand read,writeauthorization scopes.
      Auth:
        DefaultAuthorizer: CustomCognitoAuthorizer
        Authorizers:
          CustomCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            AuthorizationScopes:
              - access_points/read
              - access_points/write

  CreateItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.wilkom.awscrudapi.handler.CreateItemHandler::handleRequest
      CodeUri: .
      # Role: !GetAtt LambdaFunctionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CrudDBTable
        - AWSXrayWriteOnlyAccess
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /items
            Method: POST
            RestApiId: !Ref CrudAPI

  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.wilkom.awscrudapi.handler.GetItemsHandler::handleRequest
      CodeUri: .
      # Role: !GetAtt LambdaFunctionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CrudDBTable
        - AWSXrayWriteOnlyAccess
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /items
            Method: GET
            RestApiId: !Ref CrudAPI

  FindItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.wilkom.awscrudapi.handler.FindItemHandler::handleRequest
      CodeUri: .
      # Role: !GetAtt LambdaFunctionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CrudDBTable
        - AWSXrayWriteOnlyAccess
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: GET
            RestApiId: !Ref CrudAPI

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.wilkom.awscrudapi.handler.DeleteItemHandler::handleRequest
      CodeUri: .
      # Role: !GetAtt LambdaFunctionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CrudDBTable
        - AWSXrayWriteOnlyAccess
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: DELETE
            RestApiId: !Ref CrudAPI

  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.wilkom.awscrudapi.handler.UpdateItemHandler::handleRequest
      CodeUri: .
      # Role: !GetAtt LambdaFunctionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CrudDBTable
        - AWSXrayWriteOnlyAccess
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: PUT
            RestApiId: !Ref CrudAPI
  ################################################################################
  #  Items raw images s3 bucket : images are deleted after 1 day
  ################################################################################
  SrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRawFileRule
            Status: Enabled
            ExpirationInDays: 1

  ################################################################################
  #  Thumbnail s3 bucket : make it private in order the be accessed by Cloudfront#
  ################################################################################
  DestBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: "Bucket to store items thumbnail images"
    Properties:
      BucketName: !Sub "${BucketName}-resized"
      AccessControl: "Private"

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Metadata:
      Comment: "Bucket policy to allow cloudfront to access the thumbnail images"
    Properties:
      Bucket: !Ref DestBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt CfOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub "arn:aws:s3:::${DestBucket}/*"

  CfDistribution:
    Type: "AWS::CloudFront::Distribution"
    Metadata:
      Comment: "A simple CloudFront distribution with an S3 origin"
    Properties:
      DistributionConfig:
        Comment: "A simple distribution with an S3 origin"
        DefaultCacheBehavior:
          AllowedMethods:
            - "HEAD"
            - "GET"
          CachedMethods:
            - "HEAD"
            - "GET"
          Compress: false
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: "none"
            Headers:
              - "Origin"
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 86400
          TargetOriginId: !Sub "s3-origin-${DestBucket}"
          ViewerProtocolPolicy: "redirect-to-https"
        Enabled: true
        HttpVersion: "http1.1"
        IPV6Enabled: false
        Origins:
          - DomainName: !GetAtt DestBucket.DomainName
            Id: !Sub "s3-origin-${DestBucket}"
            OriginPath: ""
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CfOriginAccessIdentity}"
        PriceClass: "PriceClass_All"

  CfOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Metadata:
      Comment: "Access S3 bucket content only through CloudFront"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Access S3 bucket content only through CloudFront"

  CreateThumbnail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.wilkom.awscrudapi.handler.CreateThumbnailHandler::handleRequest
      CodeUri: .
      Policies: AWSLambdaExecute
      Events:
        CreateThumbnailEvent:
          Type: S3
          Properties:
            Bucket: !Ref SrcBucket
            Events: s3:ObjectCreated:*

  CrudDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: crud-table
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
      PrimaryKey:
        Name: id
        Type: String

Outputs:
  CrudAPI:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${CrudAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  CognitoDomainName:
    Description: "CognitoDomainName URL"
    Value: !Sub "https://${CognitoDomainName}.auth.${AWS::Region}.amazoncognito.com"
  SrcBucketArn:
    Description: "Source bucket ARN"
    Value: !GetAtt SrcBucket.Arn
  SrcBucketDomainName:
    Description: "Source bucket ARN"
    Value: !GetAtt SrcBucket.DomainName
  DestBucketArn:
    Description: "Destination bucket ARN"
    Value: !GetAtt DestBucket.Arn
  DestBucketDomainName:
    Description: "Destination bucket ARN"
    Value: !GetAtt DestBucket.DomainName
  CfDistributionId:
    Description: "Id for our cloudfront distribution"
    Value: !Ref CfDistribution
  CfDistributionDomainName:
    Description: "Domain name for our cloudfront distribution"
    Value: !GetAtt CfDistribution.DomainName
